warning: profiles for the non root package will be ignored, specify profiles at the workspace root:
package:   /Users/victorsintnicolaas/programs/snarkVM_2/mpc-snarks/Cargo.toml
workspace: /Users/victorsintnicolaas/programs/snarkVM_2/Cargo.toml
warning: trait method `POWERS_OF_ROOTS_OF_UNITY` should have a snake case name
  --> fields/src/traits/fft_parameters.rs:44:8
   |
44 |     fn POWERS_OF_ROOTS_OF_UNITY() -> Vec<Self::BigInteger>;
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `powers_of_roots_of_unity`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: `snarkvm-fields` (lib) generated 1 warning
warning: for loop over a `&mut Option`. This is more readably written as an `if let` statement
  --> curves/src/traits/mpc_wire.rs:96:18
   |
96 |         for x in self {
   |                  ^^^^
   |
   = note: `#[warn(for_loops_over_fallibles)]` on by default
help: to check pattern in a loop use `while let`
   |
96 |         while let Some(x) = self {
   |         ~~~~~~~~~~~~~~~ ~~~
help: consider using `if let` to clear intent
   |
96 |         if let Some(x) = self {
   |         ~~~~~~~~~~~~ ~~~

warning: for loop over a `&Option`. This is more readably written as an `if let` statement
   --> curves/src/traits/mpc_wire.rs:101:18
    |
101 |         for x in self {
    |                  ^^^^
    |
help: to check pattern in a loop use `while let`
    |
101 |         while let Some(x) = self {
    |         ~~~~~~~~~~~~~~~ ~~~
help: consider using `if let` to clear intent
    |
101 |         if let Some(x) = self {
    |         ~~~~~~~~~~~~ ~~~

warning: `snarkvm-curves` (lib) generated 2 warnings
warning: unexpected `cfg` condition value: `cuda`
   --> fft/src/fft/domain.rs:375:19
    |
375 |         #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cuda`
   --> fft/src/fft/domain.rs:404:19
    |
404 |         #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> fft/src/fft/domain.rs:425:19
    |
425 |         #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> fft/src/fft/domain.rs:452:19
    |
452 |         #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> fft/src/fft/domain.rs:483:19
    |
483 |         #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> fft/src/fft/domain.rs:517:19
    |
517 |         #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
  --> fft/src/fft/polynomial/multiplier.rs:79:27
   |
79 |                 #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
   |                           ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
   = help: consider adding `cuda` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `snarkvm-fft` (lib) generated 7 warnings
warning: unexpected `cfg` condition value: `cuda`
  --> msm/src/msm/variable_base/mod.rs:33:23
   |
33 |             #[cfg(all(feature = "cuda", target_arch = "x86_64"))]
   |                       ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cfg-if`, `crossbeam-channel`, `crypto_hash`, `default`, `fft`, `full`, `fxhash`, `indexmap`, `lazy_static`, `msm`, `profiler`, `rand_core`, `rust-gpu-tools`, `serial`, `snarkvm-parameters`, `test`, and `wasm-bindgen-futures`
   = help: consider adding `cuda` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused attribute `macro_use`
  --> mpc-net/src/multi.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the built-in attribute `macro_use` will be ignored, since it's applied to the macro invocation `lazy_static`
  --> mpc-net/src/multi.rs:14:1
   |
14 | lazy_static! {
   | ^^^^^^^^^^^
   = note: `#[warn(unused_attributes)]` on by default

warning: unused attribute `macro_use`
  --> mpc-net/src/two.rs:12:1
   |
12 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the built-in attribute `macro_use` will be ignored, since it's applied to the macro invocation `lazy_static`
  --> mpc-net/src/two.rs:13:1
   |
13 | lazy_static! {
   | ^^^^^^^^^^^

warning: field `id` is never read
  --> mpc-net/src/multi.rs:27:5
   |
26 | struct Peer {
   |        ---- field in this struct
27 |     id: usize,
   |     ^^
   |
   = note: `Peer` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: `snarkvm-msm` (lib) generated 1 warning
warning: `mpc-net` (lib) generated 3 warnings
    Checking mpc-algebra v1.0.0 (/Users/victorsintnicolaas/programs/snarkVM_2/mpc-algebra)
warning: unused import: `reveal_impl::*`
 --> mpc-algebra/src/lib.rs:8:9
  |
8 | pub use reveal_impl::*;
  |         ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: ambiguous glob re-exports
  --> mpc-algebra/src/lib.rs:12:9
   |
12 | pub use share::*;
   |         ^^^^^^^^ the name `field` in the type namespace is first re-exported here
13 | pub mod wire;
14 | pub use wire::*;
   |         ------- but the name `field` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
  --> mpc-algebra/src/lib.rs:12:9
   |
12 | pub use share::*;
   |         ^^^^^^^^ the name `pairing` in the type namespace is first re-exported here
13 | pub mod wire;
14 | pub use wire::*;
   |         ------- but the name `pairing` in the type namespace is also re-exported here

warning: unused import: `zeroize::Zeroize`
  --> mpc-algebra/src/wire/bigint.rs:10:5
   |
10 | use zeroize::Zeroize;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `BigInteger`
 --> mpc-algebra/src/wire/field.rs:8:5
  |
8 |     BigInteger, CanonicalDeserialize, CanonicalDeserializeWithFlags, CanonicalSerialize, CanonicalSerializeWithFlags, Compress, Flags, Fr...
  |     ^^^^^^^^^^

warning: unused import: `crate::FieldShare`
  --> mpc-algebra/src/wire/pairing.rs:23:5
   |
23 | use crate::FieldShare;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `BigInteger`
 --> mpc-algebra/src/wire/pairing.rs:6:5
  |
6 |     BigInteger, CanonicalDeserialize, CanonicalDeserializeWithFlags, CanonicalSerialize, CanonicalSerializeWithFlags, Compress, Flags, Fr...
  |     ^^^^^^^^^^

warning: unused import: `distributions::Distribution`
  --> mpc-algebra/src/wire/pairing.rs:11:17
   |
11 | use rand::{Rng, distributions::Distribution};
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `deserializer`
  --> mpc-algebra/src/com.rs:28:42
   |
28 |     fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
   |                                          ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deserializer`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `serializer`
  --> mpc-algebra/src/com.rs:34:41
   |
34 |     fn serialize<SS: Serializer>(&self, serializer: SS) -> Result<SS::Ok, SS::Error> {
   |                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_serializer`

warning: unused variable: `vec`
  --> mpc-algebra/src/com.rs:46:29
   |
46 |     fn write_bits_be(&self, vec: &mut Vec<bool>) {
   |                             ^^^ help: if this is intentional, prefix it with an underscore: `_vec`

warning: unused variable: `vec`
  --> mpc-algebra/src/com.rs:49:29
   |
49 |     fn write_bits_le(&self, vec: &mut Vec<bool>) {
   |                             ^^^ help: if this is intentional, prefix it with an underscore: `_vec`

warning: unused variable: `f`
   --> mpc-algebra/src/wire/bigint.rs:105:19
    |
105 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `reader`
   --> mpc-algebra/src/wire/bigint.rs:129:29
    |
129 |     fn read_le<R: Read>(mut reader: R) -> io::Result<Self> {
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reader`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/bigint.rs:129:25
    |
129 |     fn read_le<R: Read>(mut reader: R) -> io::Result<Self> {
    |                         ----^^^^^^
    |                         |
    |                         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `writer`
   --> mpc-algebra/src/wire/bigint.rs:135:38
    |
135 |     fn write_le<W: Write>(&self, mut writer: W) -> io::Result<()> {
    |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/bigint.rs:135:34
    |
135 |     fn write_le<W: Write>(&self, mut writer: W) -> io::Result<()> {
    |                                  ----^^^^^^
    |                                  |
    |                                  help: remove this `mut`

warning: unused variable: `rng`
   --> mpc-algebra/src/wire/bigint.rs:164:39
    |
164 |     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MpcBigInteger<F, S, T> {
    |                                       ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `f`
   --> mpc-algebra/src/wire/bigint.rs:176:30
    |
176 |             MpcField::Shared(f) => {
    |                              ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `q1`
   --> mpc-algebra/src/wire/field.rs:567:9
    |
567 |         q1: &[u64; 4],
    |         ^^ help: if this is intentional, prefix it with an underscore: `_q1`

warning: unused variable: `q2`
   --> mpc-algebra/src/wire/field.rs:568:9
    |
568 |         q2: &[u64; 4],
    |         ^^ help: if this is intentional, prefix it with an underscore: `_q2`

warning: unused variable: `b1`
   --> mpc-algebra/src/wire/field.rs:569:9
    |
569 |         b1: Self,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_b1`

warning: unused variable: `b2`
   --> mpc-algebra/src/wire/field.rs:570:9
    |
570 |         b2: Self,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_b2`

warning: unused variable: `r128`
   --> mpc-algebra/src/wire/field.rs:571:9
    |
571 |         r128: Self,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_r128`

warning: unused variable: `half_r`
   --> mpc-algebra/src/wire/field.rs:572:9
    |
572 |         half_r: &[u64; 8],
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_half_r`

warning: unused variable: `state`
   --> mpc-algebra/src/wire/field_parameters.rs:157:42
    |
157 |     fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
    |                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: function cannot return without recursing
   --> mpc-algebra/src/wire/macros.rs:456:13
    |
456 |             fn $assopfn(&mut self, other: $wrap<T, S>) {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing
457 |                 self.$assopfn(other);
    |                 -------------------- recursive call site
    |
   ::: mpc-algebra/src/wire/group.rs:196:1
    |
196 | impl_ref_ops_group!(Add, AddAssign, add, add_assign, ProjectiveCurve,ProjectiveGroupShare, MpcProjectiveGroup);
    | -------------------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: a `loop` may express intention better if this is on purpose
    = note: `#[warn(unconditional_recursion)]` on by default
    = note: this warning originates in the macro `impl_ref_ops_group` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mpc-algebra/src/wire/macros.rs:456:13
    |
456 |             fn $assopfn(&mut self, other: $wrap<T, S>) {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing
457 |                 self.$assopfn(other);
    |                 -------------------- recursive call site
    |
   ::: mpc-algebra/src/wire/group.rs:197:1
    |
197 | impl_ref_ops_group!(Add, AddAssign, add, add_assign, AffineCurve,AffineGroupShare, MpcAffineGroup);
    | -------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: a `loop` may express intention better if this is on purpose
    = note: this warning originates in the macro `impl_ref_ops_group` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mpc-algebra/src/wire/macros.rs:456:13
    |
456 |             fn $assopfn(&mut self, other: $wrap<T, S>) {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing
457 |                 self.$assopfn(other);
    |                 -------------------- recursive call site
    |
   ::: mpc-algebra/src/wire/group.rs:198:1
    |
198 | impl_ref_ops_group!(Sub, SubAssign, sub, sub_assign, ProjectiveCurve,ProjectiveGroupShare, MpcProjectiveGroup);
    | -------------------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: a `loop` may express intention better if this is on purpose
    = note: this warning originates in the macro `impl_ref_ops_group` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mpc-algebra/src/wire/macros.rs:456:13
    |
456 |             fn $assopfn(&mut self, other: $wrap<T, S>) {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing
457 |                 self.$assopfn(other);
    |                 -------------------- recursive call site
    |
   ::: mpc-algebra/src/wire/group.rs:199:1
    |
199 | impl_ref_ops_group!(Sub, SubAssign, sub, sub_assign, AffineCurve,AffineGroupShare, MpcAffineGroup);
    | -------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: a `loop` may express intention better if this is on purpose
    = note: this warning originates in the macro `impl_ref_ops_group` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `reader`
   --> mpc-algebra/src/wire/pairing.rs:152:29
    |
152 |     fn read_le<R: Read>(mut reader: R) -> io::Result<Self> {
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reader`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:152:25
    |
152 |     fn read_le<R: Read>(mut reader: R) -> io::Result<Self> {
    |                         ----^^^^^^
    |                         |
    |                         help: remove this `mut`

warning: unused variable: `writer`
   --> mpc-algebra/src/wire/pairing.rs:157:38
    |
157 |     fn write_le<W: Write>(&self, mut writer: W) -> io::Result<()> {
    |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:157:34
    |
157 |     fn write_le<W: Write>(&self, mut writer: W) -> io::Result<()> {
    |                                  ----^^^^^^
    |                                  |
    |                                  help: remove this `mut`

warning: unused variable: `writer`
   --> mpc-algebra/src/wire/pairing.rs:162:49
    |
162 |     fn serialize_with_mode<W: Write>(&self, mut writer: W, compress: Compress) -> Result<(), SerializationError> {
    |                                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `compress`
   --> mpc-algebra/src/wire/pairing.rs:162:60
    |
162 |     fn serialize_with_mode<W: Write>(&self, mut writer: W, compress: Compress) -> Result<(), SerializationError> {
    |                                                            ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:162:45
    |
162 |     fn serialize_with_mode<W: Write>(&self, mut writer: W, compress: Compress) -> Result<(), SerializationError> {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: unused variable: `compress`
   --> mpc-algebra/src/wire/pairing.rs:166:31
    |
166 |     fn serialized_size(&self, compress: Compress) -> usize {
    |                               ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress`

warning: unused variable: `reader`
   --> mpc-algebra/src/wire/pairing.rs:172:13
    |
172 |         mut reader: R,
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reader`

warning: unused variable: `compress`
   --> mpc-algebra/src/wire/pairing.rs:173:9
    |
173 |         compress: Compress,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress`

warning: unused variable: `validate`
   --> mpc-algebra/src/wire/pairing.rs:174:9
    |
174 |         validate: Validate,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validate`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:172:9
    |
172 |         mut reader: R,
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `batch`
   --> mpc-algebra/src/wire/pairing.rs:184:24
    |
184 |     fn batch_check<'a>(batch: impl Iterator<Item = &'a Self>) -> Result<(), SerializationError>
    |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_batch`

warning: unused variable: `reader`
   --> mpc-algebra/src/wire/pairing.rs:281:29
    |
281 |     fn read_le<R: Read>(mut reader: R) -> io::Result<Self> {
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reader`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:281:25
    |
281 |     fn read_le<R: Read>(mut reader: R) -> io::Result<Self> {
    |                         ----^^^^^^
    |                         |
    |                         help: remove this `mut`

warning: unused variable: `writer`
   --> mpc-algebra/src/wire/pairing.rs:286:38
    |
286 |     fn write_le<W: Write>(&self, mut writer: W) -> io::Result<()> {
    |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:286:34
    |
286 |     fn write_le<W: Write>(&self, mut writer: W) -> io::Result<()> {
    |                                  ----^^^^^^
    |                                  |
    |                                  help: remove this `mut`

warning: unused variable: `writer`
   --> mpc-algebra/src/wire/pairing.rs:291:49
    |
291 |     fn serialize_with_mode<W: Write>(&self, mut writer: W, compress: Compress) -> Result<(), SerializationError> {
    |                                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `compress`
   --> mpc-algebra/src/wire/pairing.rs:291:60
    |
291 |     fn serialize_with_mode<W: Write>(&self, mut writer: W, compress: Compress) -> Result<(), SerializationError> {
    |                                                            ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:291:45
    |
291 |     fn serialize_with_mode<W: Write>(&self, mut writer: W, compress: Compress) -> Result<(), SerializationError> {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: unused variable: `compress`
   --> mpc-algebra/src/wire/pairing.rs:295:31
    |
295 |     fn serialized_size(&self, compress: Compress) -> usize {
    |                               ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress`

warning: unused variable: `reader`
   --> mpc-algebra/src/wire/pairing.rs:301:13
    |
301 |         mut reader: R,
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reader`

warning: unused variable: `compress`
   --> mpc-algebra/src/wire/pairing.rs:302:9
    |
302 |         compress: Compress,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compress`

warning: unused variable: `validate`
   --> mpc-algebra/src/wire/pairing.rs:303:9
    |
303 |         validate: Validate,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validate`

warning: variable does not need to be mutable
   --> mpc-algebra/src/wire/pairing.rs:301:9
    |
301 |         mut reader: R,
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `batch`
   --> mpc-algebra/src/wire/pairing.rs:313:24
    |
313 |     fn batch_check<'a>(batch: impl Iterator<Item = &'a Self>) -> Result<(), SerializationError>
    |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_batch`

warning: unused variable: `deserializer`
    --> mpc-algebra/src/wire/pairing.rs:820:50
     |
820  |               fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
     |                                                    ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deserializer`
...
1154 | / impl_pairing_curve_wrapper_aff!(
1155 | |     MpcAffineGroup,
1156 | |     PairingEngine,
1157 | |     PairingShare,
...    |
1164 | |     MpcG1Projective
1165 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `serializer`
    --> mpc-algebra/src/wire/pairing.rs:826:49
     |
826  |               fn serialize<SS: Serializer>(&self, serializer: SS) -> Result<SS::Ok, SS::Error> {
     |                                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_serializer`
...
1154 | / impl_pairing_curve_wrapper_aff!(
1155 | |     MpcAffineGroup,
1156 | |     PairingEngine,
1157 | |     PairingShare,
...    |
1164 | |     MpcG1Projective
1165 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `a`
    --> mpc-algebra/src/wire/pairing.rs:841:44
     |
841  |                       MpcAffineGroup::Shared(a) => {
     |                                              ^ help: if this is intentional, prefix it with an underscore: `_a`
...
1154 | / impl_pairing_curve_wrapper_aff!(
1155 | |     MpcAffineGroup,
1156 | |     PairingEngine,
1157 | |     PairingShare,
...    |
1164 | |     MpcG1Projective
1165 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1010:26
     |
1010 |               fn mul(self, other: MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1154 | / impl_pairing_curve_wrapper_aff!(
1155 | |     MpcAffineGroup,
1156 | |     PairingEngine,
1157 | |     PairingShare,
...    |
1164 | |     MpcG1Projective
1165 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1022:26
     |
1022 |               fn mul(self, other: &'a MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1154 | / impl_pairing_curve_wrapper_aff!(
1155 | |     MpcAffineGroup,
1156 | |     PairingEngine,
1157 | |     PairingShare,
...    |
1164 | |     MpcG1Projective
1165 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `deserializer`
    --> mpc-algebra/src/wire/pairing.rs:1050:50
     |
1050 |               fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
     |                                                    ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deserializer`
...
1166 | / impl_pairing_curve_wrapper_proj!(
1167 | |     MpcProjectiveGroup,
1168 | |     PairingEngine,
1169 | |     PairingShare,
...    |
1175 | |     MpcG1Projective
1176 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `serializer`
    --> mpc-algebra/src/wire/pairing.rs:1056:49
     |
1056 |               fn serialize<SS: Serializer>(&self, serializer: SS) -> Result<SS::Ok, SS::Error> {
     |                                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_serializer`
...
1166 | / impl_pairing_curve_wrapper_proj!(
1167 | |     MpcProjectiveGroup,
1168 | |     PairingEngine,
1169 | |     PairingShare,
...    |
1175 | |     MpcG1Projective
1176 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1118:26
     |
1118 |               fn mul(self, other: MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1166 | / impl_pairing_curve_wrapper_proj!(
1167 | |     MpcProjectiveGroup,
1168 | |     PairingEngine,
1169 | |     PairingShare,
...    |
1175 | |     MpcG1Projective
1176 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1130:26
     |
1130 |               fn mul(self, other: &'a MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1166 | / impl_pairing_curve_wrapper_proj!(
1167 | |     MpcProjectiveGroup,
1168 | |     PairingEngine,
1169 | |     PairingShare,
...    |
1175 | |     MpcG1Projective
1176 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `deserializer`
    --> mpc-algebra/src/wire/pairing.rs:820:50
     |
820  |               fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
     |                                                    ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deserializer`
...
1177 | / impl_pairing_curve_wrapper_aff!(
1178 | |     MpcAffineGroup,
1179 | |     PairingEngine,
1180 | |     PairingShare,
...    |
1187 | |     MpcG2Projective
1188 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `serializer`
    --> mpc-algebra/src/wire/pairing.rs:826:49
     |
826  |               fn serialize<SS: Serializer>(&self, serializer: SS) -> Result<SS::Ok, SS::Error> {
     |                                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_serializer`
...
1177 | / impl_pairing_curve_wrapper_aff!(
1178 | |     MpcAffineGroup,
1179 | |     PairingEngine,
1180 | |     PairingShare,
...    |
1187 | |     MpcG2Projective
1188 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `a`
    --> mpc-algebra/src/wire/pairing.rs:841:44
     |
841  |                       MpcAffineGroup::Shared(a) => {
     |                                              ^ help: if this is intentional, prefix it with an underscore: `_a`
...
1177 | / impl_pairing_curve_wrapper_aff!(
1178 | |     MpcAffineGroup,
1179 | |     PairingEngine,
1180 | |     PairingShare,
...    |
1187 | |     MpcG2Projective
1188 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1010:26
     |
1010 |               fn mul(self, other: MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1177 | / impl_pairing_curve_wrapper_aff!(
1178 | |     MpcAffineGroup,
1179 | |     PairingEngine,
1180 | |     PairingShare,
...    |
1187 | |     MpcG2Projective
1188 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1022:26
     |
1022 |               fn mul(self, other: &'a MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1177 | / impl_pairing_curve_wrapper_aff!(
1178 | |     MpcAffineGroup,
1179 | |     PairingEngine,
1180 | |     PairingShare,
...    |
1187 | |     MpcG2Projective
1188 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_aff` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `deserializer`
    --> mpc-algebra/src/wire/pairing.rs:1050:50
     |
1050 |               fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
     |                                                    ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deserializer`
...
1189 | / impl_pairing_curve_wrapper_proj!(
1190 | |     MpcProjectiveGroup,
1191 | |     PairingEngine,
1192 | |     PairingShare,
...    |
1198 | |     MpcG2Projective
1199 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `serializer`
    --> mpc-algebra/src/wire/pairing.rs:1056:49
     |
1056 |               fn serialize<SS: Serializer>(&self, serializer: SS) -> Result<SS::Ok, SS::Error> {
     |                                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_serializer`
...
1189 | / impl_pairing_curve_wrapper_proj!(
1190 | |     MpcProjectiveGroup,
1191 | |     PairingEngine,
1192 | |     PairingShare,
...    |
1198 | |     MpcG2Projective
1199 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1118:26
     |
1118 |               fn mul(self, other: MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1189 | / impl_pairing_curve_wrapper_proj!(
1190 | |     MpcProjectiveGroup,
1191 | |     PairingEngine,
1192 | |     PairingShare,
...    |
1198 | |     MpcG2Projective
1199 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `other`
    --> mpc-algebra/src/wire/pairing.rs:1130:26
     |
1130 |               fn mul(self, other: &'a MpcField<E::Fr, PS::FrShare>) -> Self::Output {
     |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`
...
1189 | / impl_pairing_curve_wrapper_proj!(
1190 | |     MpcProjectiveGroup,
1191 | |     PairingEngine,
1192 | |     PairingShare,
...    |
1198 | |     MpcG2Projective
1199 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_pairing_curve_wrapper_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `coordinates`
    --> mpc-algebra/src/wire/pairing.rs:1280:33
     |
1280 |               fn from_coordinates(coordinates: Self::Coordinates) -> Option<Self> {
     |                                   ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_coordinates`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `coordinates`
    --> mpc-algebra/src/wire/pairing.rs:1283:43
     |
1283 |               fn from_coordinates_unchecked(coordinates: Self::Coordinates) -> Self {
     |                                             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_coordinates`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `x`
    --> mpc-algebra/src/wire/pairing.rs:1292:39
     |
1292 |               fn pair_from_x_coordinate(x: Self::BaseField) -> Option<(Self, Self)> {
     |                                         ^ help: if this is intentional, prefix it with an underscore: `_x`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `bits`
    --> mpc-algebra/src/wire/pairing.rs:1301:32
     |
1301 |               fn mul_bits(&self, bits: impl Iterator<Item = bool>) -> Self::Projective {
     |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_bits`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `a`
    --> mpc-algebra/src/wire/pairing.rs:1316:33
     |
1316 |               fn batch_add_loop_1(a: &mut Self, b: &mut Self, _half: &Self::BaseField, inversion_tmp: &mut Self::BaseField) {
     |                                   ^ help: if this is intentional, prefix it with an underscore: `_a`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `b`
    --> mpc-algebra/src/wire/pairing.rs:1316:47
     |
1316 |               fn batch_add_loop_1(a: &mut Self, b: &mut Self, _half: &Self::BaseField, inversion_tmp: &mut Self::BaseField) {
     |                                                 ^ help: if this is intentional, prefix it with an underscore: `_b`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `inversion_tmp`
    --> mpc-algebra/src/wire/pairing.rs:1316:86
     |
1316 |               fn batch_add_loop_1(a: &mut Self, b: &mut Self, _half: &Self::BaseField, inversion_tmp: &mut Self::BaseField) {
     |                                                                                        ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inversion_tmp`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `a`
    --> mpc-algebra/src/wire/pairing.rs:1319:33
     |
1319 |               fn batch_add_loop_2(a: &mut Self, b: Self, inversion_tmp: &mut Self::BaseField) {
     |                                   ^ help: if this is intentional, prefix it with an underscore: `_a`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `b`
    --> mpc-algebra/src/wire/pairing.rs:1319:47
     |
1319 |               fn batch_add_loop_2(a: &mut Self, b: Self, inversion_tmp: &mut Self::BaseField) {
     |                                                 ^ help: if this is intentional, prefix it with an underscore: `_b`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `inversion_tmp`
    --> mpc-algebra/src/wire/pairing.rs:1319:56
     |
1319 |               fn batch_add_loop_2(a: &mut Self, b: Self, inversion_tmp: &mut Self::BaseField) {
     |                                                          ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inversion_tmp`
...
1374 | / impl_aff_proj!(
1375 | |     // MpcG1Prep,
1376 | |     MpcG1Affine,
1377 | |     MpcG1Projective,
...    |
1385 | |     G1ProjectiveShare
1386 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `coordinates`
    --> mpc-algebra/src/wire/pairing.rs:1280:33
     |
1280 |               fn from_coordinates(coordinates: Self::Coordinates) -> Option<Self> {
     |                                   ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_coordinates`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `coordinates`
    --> mpc-algebra/src/wire/pairing.rs:1283:43
     |
1283 |               fn from_coordinates_unchecked(coordinates: Self::Coordinates) -> Self {
     |                                             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_coordinates`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `x`
    --> mpc-algebra/src/wire/pairing.rs:1292:39
     |
1292 |               fn pair_from_x_coordinate(x: Self::BaseField) -> Option<(Self, Self)> {
     |                                         ^ help: if this is intentional, prefix it with an underscore: `_x`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `bits`
    --> mpc-algebra/src/wire/pairing.rs:1301:32
     |
1301 |               fn mul_bits(&self, bits: impl Iterator<Item = bool>) -> Self::Projective {
     |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_bits`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `a`
    --> mpc-algebra/src/wire/pairing.rs:1316:33
     |
1316 |               fn batch_add_loop_1(a: &mut Self, b: &mut Self, _half: &Self::BaseField, inversion_tmp: &mut Self::BaseField) {
     |                                   ^ help: if this is intentional, prefix it with an underscore: `_a`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `b`
    --> mpc-algebra/src/wire/pairing.rs:1316:47
     |
1316 |               fn batch_add_loop_1(a: &mut Self, b: &mut Self, _half: &Self::BaseField, inversion_tmp: &mut Self::BaseField) {
     |                                                 ^ help: if this is intentional, prefix it with an underscore: `_b`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `inversion_tmp`
    --> mpc-algebra/src/wire/pairing.rs:1316:86
     |
1316 |               fn batch_add_loop_1(a: &mut Self, b: &mut Self, _half: &Self::BaseField, inversion_tmp: &mut Self::BaseField) {
     |                                                                                        ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inversion_tmp`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `a`
    --> mpc-algebra/src/wire/pairing.rs:1319:33
     |
1319 |               fn batch_add_loop_2(a: &mut Self, b: Self, inversion_tmp: &mut Self::BaseField) {
     |                                   ^ help: if this is intentional, prefix it with an underscore: `_a`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `b`
    --> mpc-algebra/src/wire/pairing.rs:1319:47
     |
1319 |               fn batch_add_loop_2(a: &mut Self, b: Self, inversion_tmp: &mut Self::BaseField) {
     |                                                 ^ help: if this is intentional, prefix it with an underscore: `_b`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `inversion_tmp`
    --> mpc-algebra/src/wire/pairing.rs:1319:56
     |
1319 |               fn batch_add_loop_2(a: &mut Self, b: Self, inversion_tmp: &mut Self::BaseField) {
     |                                                          ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inversion_tmp`
...
1387 | / impl_aff_proj!(
1388 | |     // MpcG2Prep,
1389 | |     MpcG2Affine,
1390 | |     MpcG2Projective,
...    |
1398 | |     G2ProjectiveShare
1399 | | );
     | |_- in this macro invocation
     |
     = note: this warning originates in the macro `impl_aff_proj` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `mpc-algebra` (lib) generated 94 warnings (run `cargo fix --lib -p mpc-algebra` to apply 12 suggestions)
    Finished `dev` profile [optimized + debuginfo] target(s) in 0.33s
